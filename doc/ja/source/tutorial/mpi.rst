グリッド型探索
=====================================

ここでは、グリッド型探索を行い、回折データから原子座標を解析する方法について説明します。
グリッド型探索はMPIに対応しています。具体的な計算手順は ``minsearch`` の時と同様です。
ただし、探索グリッドを与えるデータ ``MeshData.txt`` を事前に準備する必要があります。

サンプルファイルの場所
~~~~~~~~~~~~~~~~~~~~~~~~

サンプルファイルは ``sample/original/mapper`` にあります。
フォルダには以下のファイルが格納されています。

- ``bulk.txt``

  ``bulk.exe`` の入力ファイル

- ``experiment.txt`` , ``template.txt``

  メインプログラムでの計算を進めるための参照ファイル

- ``ref_ColorMap.txt``

  計算が正しく実行されたか確認するためのファイル(本チュートリアルを行うことで得られる ``ColorMap.txt`` の回答)。

- ``input.toml``

  メインプログラムの入力ファイル

- ``prepare.sh`` , ``do.sh``

  本チュートリアルを一括計算するために準備されたスクリプト

以下、これらのファイルについて説明したあと、実際の計算結果を紹介します。

参照ファイルの説明
~~~~~~~~~~~~~~~~~~~

``template.txt`` , ``experiment.txt`` については、
前のチュートリアル(Nealder-Mead法による最適化)と同じものを使用します。
詳細についてはそちらをご覧ください。
グリッド型探索では探索グリッドを与えるデータ
``MeshData.txt`` を事前に準備する必要があります。
``MeshData.txt`` の中身は以下のようになっています。

.. code-block::

    1 6.000000 6.000000 3.500000
    2 6.000000 5.750000 3.500000
    3 6.000000 5.500000 3.500000
    4 6.000000 5.250000 3.500000
    5 6.000000 5.000000 3.500000
    6 6.000000 4.750000 3.500000
    7 6.000000 4.500000 3.500000
    8 6.000000 4.250000 3.500000
    9 6.000000 4.000000 3.500000
    ...

1列目が通し番号、2列目以降は ``template.txt`` に入る ``value_*`` の値を順に入ります。

続いてmapper\_mpi.pyを実行します。

*Linux, Macの場合*

Linux, Macの場合はmpirunコマンドを用いて並列化して実行します。

.. code-block::

   mpirun -np 4 python mapper_mpi.py

ここで、npオプションの後ろの数字で並列化数を指定しています。
上記の例では -np 4 としているので、4並列で計算します。

*Windowsの場合*

Windows環境では並列計算に対応していないため、
minsearch.pyと同様にそのまま実行します。

.. code-block::

   python mapper_mpi.py

上記によって、実行フォルダの下に、mapper\*\*\*\*\*\*\*\*フォルダ（\*\*\*\*\*\*\*\*にはプロセス番号が入る）が生成され、
その下のLog\*\*\*\*\*\*\*\*フォルダにロッキングカーブ等のデータが格納されます。



